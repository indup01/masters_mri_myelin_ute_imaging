close all; clearvars; clc
addpath('./dsv-reader/') % add reader function
addpath ('/') % dsv file dir
pwd
c = 1
%% Load dsv files

protocol = 'DspData'; %3D Cone simulation

GRX_file = [protocol,'_GRX.dsv'];
GRY_file = [protocol,'_GRY.dsv'];
GRZ_file = [protocol,'_GRZ.dsv'];
ADC_file = [protocol,'_ADC.dsv'];
RFD_file = [protocol,'_RFD.dsv'];

disp('Reading GRX:');
GRX = dsvread(GRX_file);
disp('Reading GRY:');
GRY = dsvread(GRY_file);
disp('Reading GRZ:');
GRZ = dsvread(GRZ_file);
disp('Reading ADC:');
ADC = dsvread(ADC_file);
disp('Reading RFD:');
RFD = dsvread(RFD_file);

%% Extract all GRD files

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Adjust the sequence parameters (bounds are included):
TR = 9.39;            %TR in ms
readouts = 141026;  %number of readouts
dummy = 2000;      %number of dummy scans
min_time = 2000*TR*1E-3;    
max_time = (readouts+dummy)*TR*1E-3;            
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%


min_time = max([GRX.time(1),min_time]);
max_time = min([GRX.time(end),max_time]);
min_sample = round(1+(min_time-GRX.time(1))/GRX.time_dwell);
max_sample = round(1+(max_time-GRX.time(1))/GRX.time_dwell);
GRDtime = GRX.time(min_sample:max_sample); 
GRXval  = GRX.values(min_sample:max_sample);
GRYval  = GRY.values(min_sample:max_sample);
GRZval  = GRZ.values(min_sample:max_sample);

%%  Remove spolier gradient (optional)
%It is more straight forward to locate the starting and ending indices
%instead of time, so we can plot the first few readouts of Z gradient to
%locate the spoiler gradient

figure;
set(gcf,'color','w');
plot(GRZval(1:TR*100*2)); 
%plot(ZG(1:TR*100*2));
title('GRZ with spoiler');

%% if one find that the spoiler is excited across the cycle (cycle here is
%not defined between RF excitation.)

spoil_end_extra = 1; %required if the spoiler appears before RF, set 1 as default
spoil_stridx    = 724;
spoil_endidx    = 825;

GRXread = remove_spoiler (GRXval, TR, spoil_end_extra, spoil_stridx, spoil_endidx);
GRYread = remove_spoiler (GRYval, TR, spoil_end_extra, spoil_stridx, spoil_endidx);
GRZread = remove_spoiler (GRZval, TR, spoil_end_extra, spoil_stridx, spoil_endidx);

figure;
set(gcf,'color','w');
plot(GRZread(1:TR*100*2));
title('GRZ without spoiler');


%% display Gx, Gy, Gz
% GRXread=GRXval;
% GRYread=GRYval;
figure(1)
set(gcf,'color','w');
subplot(211);plot(GRXval(1:TR*100*10)); 
title('TrajX with spoiler');
set(gcf,'color','w');
subplot(212);plot(GRXread(1:TR*100*10));
title('TrajX without spoiler');

figure(2)
set(gcf,'color','w');
subplot(211);plot(GRYval(1:TR*100*10)); 
title('TrajY with spoiler');
set(gcf,'color','w');
subplot(212);plot(GRYread(1:TR*100*10));
title('TrajY without spoiler');

figure(3)
set(gcf,'color','w');
subplot(211);plot(GRZval(1:TR*100*10)); 
title('TrajZ with spoiler');
set(gcf,'color','w');
subplot(212);plot(GRZread(1:TR*100*10));
title('TrajZ without spoiler');


%% Interpolate the gradient to the ADC dwell time of 5us sampling period 

% create a new ADC array with sampling period 5us, which matches the
% sampling period of ADC
ADC_dwell = 5E-6;
newADC = (min_time:ADC_dwell:max_time).'; 

%Interpolate nominal gradients 
GRXnom_interp = interp1(GRDtime,GRXread,newADC);
GRYnom_interp = interp1(GRDtime,GRYread,newADC);
GRZnom_interp = interp1(GRDtime,GRZread,newADC);

%% inerp RF and ADC
GRXnom_interp = interp1(GRDtime,GRXread,newADC);
%% Calculate the Nominal Trajectory

% Find the index after RF excitation
RF_amp = max(RFD.values);
for i = 2:length(RFD.values)
    if RFD.values(i-1) == RF_amp && RFD.values(i) == 0
        stridx = i;
        break;
    end
end

%% It makes the story complicated if we try to find the ending index of the
%trajectory automactically. Let's just plot the gradient and located the
%last index before rewinders

figure;
plot( GRZnom_interp(1:TR*200*2));hold on
plot(RFD.values(1:TR*200*2));
set(gcf,'color','w');
ylabel('Gradient Strength (mT/m)');
xlabel('Raw Indices');
title('Nominal Z Gradient')
legend('Nominal Gradient', 'RF Pulse')
 

%% find the ending index of the the gradient, e.g. 5ms TE -> 2047, 0.27ms TE  
% ->1101
endidx = 907; 
readouts_num = 397; %no. of effective readouts (excluding dead time)

KXnom = traj(GRXnom_interp,stridx,endidx,TR,readouts_num);
KYnom = traj(GRYnom_interp,stridx,endidx,TR,readouts_num);
KZnom = traj(GRZnom_interp,stridx,endidx,TR,readouts_num);
 
%% Normalization of Trajectory

%Calculate the absolute maximium of k_max in nominal trajectory
KXmax = double(max(max(KXnom),abs(min(KXnom))));
KYmax = double(max(max(KYnom),abs(min(KYnom))));
KZmax = double(max(max(KZnom),abs(min(KZnom))));

%normalize and concatenate into N*3 matrix, N = no. samples in one readout
%* no. of readouts (no. of Cones). 0.4994,0.4993, and 0.4995 are according
%to the original trajectory from '1mm_traj_dcf_interpolated.mat' in
%Shared Folder
KXnom_nomalized = (KXnom.*1)/KXmax; 
KYnom_nomalized = (KYnom.*1)/KYmax;
KZnom_nomalized = (KZnom.*1)/KZmax;
kint_nom = horzcat(KXnom_nomalized,KYnom_nomalized,KZnom_nomalized);



